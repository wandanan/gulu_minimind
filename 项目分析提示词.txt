请基于我提供的 [项目名称 / 项目文件包]，按照以下维度进行全面且深入的分析，输出结构化结果，并在最后将分析结果以当前项目名+分析报告的名称保存为 markdown 文件：
项目核心作用与背景
说明该项目的开发目标、应用场景、解决的核心问题，以及所采用的技术栈（如编程语言、框架、依赖库等），帮助理解项目的整体定位和价值。
项目目录结构详解
列出项目的完整目录树（包含文件夹与文件的层级关系），并简要说明每个文件夹的功能（如src/为源代码目录、config/为配置文件目录等），明确各部分在项目中的角色和作用。
各代码文件详细摘要
针对每个代码文件（按目录结构依次说明），详细提取并保留以下信息：
文件的核心功能（如 “用户认证工具类”“数据库连接配置”）；
包含的所有方法 / 函数（包括方法名、参数列表、返回值类型）；
每个方法的实现逻辑（如 “通过遍历数组筛选符合条件的元素”“调用 XX API 获取数据并解析”）；
关键变量或常量的定义及作用（如MAX_RETRY表示最大重试次数，BASE_URL为接口基础地址）。
核心代码分层分析
按代码功能与重要性分层梳理，每层需说明：
核心思想层：最能体现项目设计理念的代码（如核心算法、架构模式实现、创新逻辑等），分析其设计思路、为何采用该方案、解决了什么关键问题；若涉及具体公式，需重点标明公式所承载的核心思想，并以 Latex 代码写出公式；
基础支撑层：支撑项目运行的底层代码（如框架集成、数据库交互、工具类、配置管理等），说明其如何为上层功能提供基础能力，核心方法的实现逻辑及复用性；若存在公式，需说明公式作用及思想，附上 Latex 代码；
业务实现层：具体业务功能的代码（如接口处理、流程控制、数据转换等），分析其与核心思想层、基础支撑层的交互方式，关键业务流程的实现路径；
辅助功能层：辅助性代码（如日志、异常处理、测试工具、文档生成等），说明其在项目中的作用，如何保障主流程稳定运行。
代码关联与协作关系
归纳不同层级代码间的调用关系、数据传递方式，说明各层如何协同支撑项目整体功能，核心思想如何通过基础层落地、通过业务层实现价值；若核心代码中存在关联的公式，需说明公式间的联系及共同体现的思想。
关键代码片段解析
选取各层中最具代表性的代码片段（如核心算法实现、关键接口定义、基础工具方法等），逐行或分模块解释其逻辑，标注体现项目思想的关键设计（如设计模式应用、性能优化点、扩展性考虑等）；若核心代码片段中包含公式，重点解析公式的推导逻辑、在代码中的实现方式及所体现的核心思想，并以 Latex 代码写出公式。
请确保分析既有整体框架，又有细节支撑，通过全面且分层的归纳让项目的代码逻辑与设计思想清晰可见，且保存的 markdown 文件需完整保留上述所有分析内容及格式。